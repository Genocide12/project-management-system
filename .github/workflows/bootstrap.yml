name: Bootstrap Project

on:
  push:
    paths:
      - 'tasks/bootstrap.yml'

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Generate project structure
        run: |
          python - << 'PY'
          import os, textwrap, pathlib, json
          TREE = [
              "app/__init__.py",
              "app/app.py",
              "app/config.py",
              "app/logging_conf.py",
              "app/i18n/__init__.py",
              "app/i18n/ru.py",
              "app/i18n/en.py",
              "app/services/__init__.py",
              "app/services/auth.py",
              "app/services/projects.py",
              "app/services/tasks.py",
              "app/services/reports.py",
              "app/services/backup.py",
              "app/services/notifications.py",
              "app/models/__init__.py",
              "app/models/base.py",
              "app/models/user.py",
              "app/models/project.py",
              "app/models/task.py",
              "app/db/__init__.py",
              "app/db/connection.py",
              "app/db/migrations.py",
              "app/db/repository.py",
              "ui/__init__.py",
              "ui/main_window.py",
              "ui/login_dialog.py",
              "ui/project_view.py",
              "ui/task_view.py",
              "ui/calendar_view.py",
              "ui/report_view.py",
              "ui/components/__init__.py",
              "ui/components/toast.py",
              "ui/components/spinner.py",
              "ui/components/confirm.py",
              "utils/__init__.py",
              "utils/crypto.py",
              "utils/export_excel.py",
              "utils/export_pdf.py",
              "utils/fs.py",
              "utils/scheduler.py",
              "utils/settings.py",
              "utils/validators.py",
              "tests/__init__.py",
              "tests/test_models.py",
              "tests/test_services.py",
              "tests/test_ui_smoke.py",
              "scripts/__init__.py",
              "scripts/seed_demo.py",
              "scripts/backup_now.py",
              "tools/bootstrap_structure.py",
              "LICENSE",
              "requirements.txt",
              "main.py",
              "README.md",
          ]
          for path in TREE:
              d = os.path.dirname(path)
              if d and not os.path.exists(d):
                  os.makedirs(d, exist_ok=True)
              if not os.path.exists(path):
                  with open(path, "w", encoding="utf-8") as f:
                      if path.endswith(".py"):
                          f.write("# stub\n")
                      elif path == "LICENSE":
                          f.write("MIT License\n\nCopyright (c) 2025")
                      elif path == "README.md":
                          f.write("# Project Management System\n\nGenerated by GitHub Actions bootstrap.")
                      elif path == "requirements.txt":
                          f.write(textwrap.dedent("""                          PyQt6==6.6.1
                          SQLAlchemy==2.0.32
                          alembic==1.13.2
                          openpyxl==3.1.5
                          reportlab==4.2.2
                          python-dateutil==2.9.0.post0
                          cryptography==43.0.1
                          apscheduler==3.10.4
                          pydantic==2.9.2
                          """))
                      elif path == "main.py":
                          f.write(textwrap.dedent("""                          import sys
                          from app.app import ProjectApp
                          def main():
                              app = ProjectApp(sys.argv)
                              return app.run()
                          if __name__ == "__main__":
                              raise SystemExit(main())
                          """))
                      else:
                          f.write("")
          # Fill core files minimal working content
          pathlib.Path("data").mkdir(parents=True, exist_ok=True)
          open("app/__init__.py","w",encoding="utf-8").write("__all__=[]\n")
          open("app/logging_conf.py","w",encoding="utf-8").write("import logging,sys\n\ndef configure_logging(cfg):\n    level=getattr(logging,cfg.log_level.upper(),logging.INFO)\n    logging.basicConfig(level=level,format='%(asctime)s %(levelname)s %(name)s: %(message)s',handlers=[logging.StreamHandler(sys.stdout)])\n")
          open("app/config.py","w",encoding="utf-8").write("from pydantic import BaseModel\nfrom pathlib import Path\n\nclass Settings(BaseModel):\n    database_url: str = f\"sqlite:///{Path('data/db.sqlite').as_posix()}\"\n    locale: str = 'ru'\n    backup_dir: str = 'backups'\n    log_level: str = 'INFO'\n    @classmethod\n    def load(cls):\n        Path('data').mkdir(exist_ok=True, parents=True)\n        return cls()\n")
          open("utils/settings.py","w",encoding="utf-8").write("from pathlib import Path\nimport json\n\nclass AppSettings:\n    def __init__(self, path: Path|None=None):\n        self.path = path or Path('data/app_settings.json')\n        self.data = {}\n        self.load()\n    def load(self):\n        if self.path.exists():\n            self.data = json.loads(self.path.read_text(encoding='utf-8'))\n        else:\n            self.data = {'theme':'light'}\n            self.save()\n    def save(self):\n        self.path.parent.mkdir(parents=True, exist_ok=True)\n        self.path.write_text(json.dumps(self.data, ensure_ascii=False, indent=2), encoding='utf-8')\n")
          open("app/db/connection.py","w",encoding="utf-8").write("from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom app.models.base import Base\nfrom app.models.user import User\nfrom app.models.project import Project\nfrom app.models.task import Task\n\nclass Database:\n    def __init__(self, url: str):\n        self.engine = create_engine(url, future=True)\n        self.Session = sessionmaker(bind=self.engine, future=True)\n    def ensure_initialized(self):\n        Base.metadata.create_all(self.engine)\n    def session(self):\n        return self.Session()\n")
          open("app/models/base.py","w",encoding="utf-8").write("from sqlalchemy.orm import DeclarativeBase\nclass Base(DeclarativeBase):\n    pass\n")
          open("app/models/user.py","w",encoding="utf-8").write("from sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\nfrom .base import Base\nclass User(Base):\n    __tablename__='users'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    username: Mapped[str] = mapped_column(String(64), unique=True, index=True)\n    password_hash: Mapped[str] = mapped_column(String(128))\n    role: Mapped[str] = mapped_column(String(32), default='user')\n")
          open("app/models/project.py","w",encoding="utf-8").write("from sqlalchemy import Integer, String, Text\nfrom sqlalchemy.orm import Mapped, mapped_column\nfrom .base import Base\nclass Project(Base):\n    __tablename__='projects'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    name: Mapped[str] = mapped_column(String(128), unique=True, index=True)\n    description: Mapped[str|None] = mapped_column(Text(), nullable=True)\n")
          open("app/models/task.py","w",encoding="utf-8").write("from sqlalchemy import Integer, String, Text, ForeignKey\nfrom sqlalchemy.orm import Mapped, mapped_column\nfrom .base import Base\nclass Task(Base):\n    __tablename__='tasks'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    project_id: Mapped[int] = mapped_column(ForeignKey('projects.id'))\n    title: Mapped[str] = mapped_column(String(200))\n    status: Mapped[str] = mapped_column(String(32), default='todo')\n    details: Mapped[str|None] = mapped_column(Text(), nullable=True)\n")
          open("app/app.py","w",encoding="utf-8").write("import sys\nfrom PyQt6 import QtWidgets\nfrom app.config import Settings\nfrom app.logging_conf import configure_logging\nfrom app.db.connection import Database\nfrom ui.main_window import MainWindow\nfrom utils.settings import AppSettings\n\nclass ProjectApp(QtWidgets.QApplication):\n    def __init__(self, argv):\n        super().__init__(argv)\n        self.setOrganizationName('Genocide12')\n        self.setApplicationName('Project Management System')\n        self.settings = AppSettings()\n        self.cfg = Settings.load()\n        configure_logging(self.cfg)\n        self.db = Database(self.cfg.database_url)\n        self.db.ensure_initialized()\n        self.window = MainWindow(self)\n    def run(self):\n        self.window.show()\n        return self.exec()\n")
          open("ui/main_window.py","w",encoding="utf-8").write("from PyQt6 import QtWidgets\n\nclass MainWindow(QtWidgets.QMainWindow):\n    def __init__(self, app):\n        super().__init__()\n        self.app = app\n        self.setWindowTitle('Project Management System')\n        self.resize(1000, 700)\n        w = QtWidgets.QWidget()\n        lay = QtWidgets.QVBoxLayout(w)\n        self.info = QtWidgets.QLabel('Добро пожаловать! База данных инициализирована.')\n        lay.addWidget(self.info)\n        self.setCentralWidget(w)\n")
          open("README.md","a",encoding="utf-8").write("\n\nRun: pip install -r requirements.txt && python main.py\n")
          PY

      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Bootstrap project structure via Actions"
            git push
          fi